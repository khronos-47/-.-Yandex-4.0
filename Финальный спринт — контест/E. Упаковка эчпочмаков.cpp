#include <iostream>
#include <vector>
#include <queue>
#include <climits>
#include <algorithm>
#include <map>
#include <unordered_map>

using namespace std;

using TField = unsigned long long;

template<class T = int>
struct TPoint {
    T x, y;

    friend ostream& operator<<(ostream& out, TPoint p) {
        return out << p.x << " " << p.y;
    }
};

template<class T = int>
struct TTriangle {
    TPoint<T> A, B, C;

    friend ostream& operator<<(ostream& out, TTriangle tr) {
        return out << tr.A << " " << tr.B << " " << tr.C;
    }
};

TField prepare(TField field, size_t N, size_t M) {
    while (4 - N) {
        field |= 0b1111000000000000111100000000000011110000000000001111ull << ((3 - N) << 2);
        N += 1;
    }
    while (4 - M) {
        field |= 0b1111111111111111ull << (M << 4);
        M += 1;
    }
    return field;
}

template<class T>
bool point_in_triangle(const TPoint<double>& point, const TTriangle<T>& triangle)
{
    auto& [A, B, C] = triangle;
    double a = (A.x - point.x) * (B.y - A.y) - (B.x - A.x) * (A.y - point.y);
    double b = (B.x - point.x) * (C.y - B.y) - (C.x - B.x) * (B.y - point.y);
    double c = (C.x - point.x) * (A.y - C.y) - (A.x - C.x) * (C.y - point.y);

    if ((a >= 0 && b >= 0 && c >= 0) || (a <= 0 && b <= 0 && c <= 0))
        return true;

    return false;
}

TField triangle2field(const TTriangle<int>& triangle) {
    auto& [ A, B, C] = triangle;
    TField field = 0;
    for (int i = 63; i >= 0; i--)
    {
        bool bit = false;
        int idx = 63 - i;
        int row = 3 - (idx >> 4), col = (idx >> 2) % 4;

        TTriangle<double> base_triangle;
        if (idx % 4 == 0) {
            base_triangle = { {col + 0.0, row + 0.0},{col + 1.0, row + 0.0},{col + 0.5, row + 0.5} };
        }
        else if (idx % 4 == 1) {
            base_triangle = { {col + 0.0, row + 0.0},{col + 0.0, row + 1.0},{col + 0.5, row + 0.5} };
        }
        else if (idx % 4 == 2) {
            base_triangle = { {col + 0.0, row + 1.0},{col + 1.0, row + 1.0},{col + 0.5, row + 0.5} };
        }
        else {
            base_triangle = { {col + 1.0, row + 1.0},{col + 1.0, row + 0.0},{col + 0.5, row + 0.5} };
        }

        if (point_in_triangle(base_triangle.A, triangle) &&
            point_in_triangle(base_triangle.B, triangle) &&
            point_in_triangle(base_triangle.C, triangle))
        {
            bit = true;
            field |= TField(bit) << i;
        }
    }

    return field;
}

const unordered_map<TField, TTriangle<int>> DATA = {
{49152, {{0, 0},{0, 1},{1, 0}}},
{24576, {{0, 0},{0, 1},{1, 1}}},
{3221250048, {{0, 0},{0, 2},{1, 1}}},
{3221289984, {{0, 0},{0, 2},{2, 0}}},
{4127219712, {{0, 0},{0, 2},{2, 2}}},
{211110460456896, {{0, 0},{0, 3},{3, 0}}},
{280791909163008, {{0, 0},{0, 3},{3, 3}}},
{13835335136339582976, {{0, 0},{0, 4},{2, 2}}},
{13835335136503201788, {{0, 0},{0, 4},{4, 0}}},
{18444210115851608064, {{0, 0},{0, 4},{4, 4}}},
{36864, {{0, 0},{1, 0},{1, 1}}},
{39936, {{0, 0},{1, 1},{2, 0}}},
{151035648, {{0, 0},{2, 0},{2, 2}}},
{163618812, {{0, 0},{2, 2},{4, 0}}},
{618642055152, {{0, 0},{3, 0},{3, 3}}},
{2533957857943551, {{0, 0},{4, 0},{4, 4}}},
{3221225472, {{0, 1},{0, 2},{1, 1}}},
{1610612736, {{0, 1},{0, 2},{1, 2}}},
{211107843145728, {{0, 1},{0, 3},{1, 2}}},
{211110460391424, {{0, 1},{0, 3},{2, 1}}},
{270481471045632, {{0, 1},{0, 3},{2, 3}}},
{13835335136503136256, {{0, 1},{0, 4},{3, 1}}},
{18401978558906892288, {{0, 1},{0, 4},{3, 4}}},
{12288, {{0, 1},{1, 0},{1, 1}}},
{2415931392, {{0, 1},{1, 0},{1, 2}}},
{13824, {{0, 1},{1, 0},{2, 1}}},
{2415919104, {{0, 1},{1, 1},{1, 2}}},
{2617245696, {{0, 1},{1, 2},{2, 1}}},
{9898272227328, {{0, 1},{2, 1},{2, 3}}},
{10722922463232, {{0, 1},{2, 3},{4, 1}}},
{40543325726441472, {{0, 1},{3, 1},{3, 4}}},
{211106232532992, {{0, 2},{0, 3},{1, 2}}},
{105553116266496, {{0, 2},{0, 3},{1, 3}}},
{13835163608398430208, {{0, 2},{0, 4},{1, 3}}},
{13835335132212363264, {{0, 2},{0, 4},{2, 2}}},
{17726273686446538752, {{0, 2},{0, 4},{2, 4}}},
{805306368, {{0, 2},{1, 1},{1, 2}}},
{158330479706112, {{0, 2},{1, 1},{1, 3}}},
{905969664, {{0, 2},{1, 1},{2, 2}}},
{158329674399744, {{0, 2},{1, 2},{1, 3}}},
{171523813933056, {{0, 2},{1, 3},{2, 2}}},
{1056965376, {{0, 2},{2, 0},{2, 2}}},
{648693169747133184, {{0, 2},{2, 0},{2, 4}}},
{1073087328, {{0, 2},{2, 0},{4, 2}}},
{648693168690167808, {{0, 2},{2, 2},{2, 4}}},
{702737446550372352, {{0, 2},{2, 4},{4, 2}}},
{13835058055282163712, {{0, 3},{0, 4},{1, 3}}},
{6917529027641081856, {{0, 3},{0, 4},{1, 4}}},
{52776558133248, {{0, 3},{1, 2},{1, 3}}},
{10376346318019756032, {{0, 3},{1, 2},{1, 4}}},
{59373627899904, {{0, 3},{1, 2},{2, 3}}},
{10376293541461622784, {{0, 3},{1, 3},{1, 4}}},
{11240984669916758016, {{0, 3},{1, 4},{2, 3}}},
{69269282881536, {{0, 3},{2, 1},{2, 3}}},
{70325851127808, {{0, 3},{2, 1},{4, 3}}},
{70300090761264, {{0, 3},{3, 0},{3, 3}}},
{3458764513820540928, {{0, 4},{1, 3},{1, 4}}},
{3891110078048108544, {{0, 4},{1, 3},{2, 4}}},
{4539631722924343296, {{0, 4},{2, 2},{2, 4}}},
{4608874979512025088, {{0, 4},{2, 2},{4, 4}}},
{4607186748130197504, {{0, 4},{3, 1},{3, 4}}},
{4611408937206349827, {{0, 4},{4, 0},{4, 4}}},
{3072, {{1, 0},{1, 1},{2, 0}}},
{1536, {{1, 0},{1, 1},{2, 1}}},
{201328128, {{1, 0},{1, 2},{2, 1}}},
{201330624, {{1, 0},{1, 2},{3, 0}}},
{257951232, {{1, 0},{1, 2},{3, 2}}},
{13194403778556, {{1, 0},{1, 3},{4, 0}}},
{17549494322688, {{1, 0},{1, 3},{4, 3}}},
{864708446021223936, {{1, 0},{1, 4},{3, 2}}},
{2304, {{1, 0},{2, 0},{2, 1}}},
{2496, {{1, 0},{2, 1},{3, 0}}},
{9439728, {{1, 0},{3, 0},{3, 2}}},
{38665128447, {{1, 0},{4, 0},{4, 3}}},
{201326592, {{1, 1},{1, 2},{2, 1}}},
{100663296, {{1, 1},{1, 2},{2, 2}}},
{13194240196608, {{1, 1},{1, 3},{2, 2}}},
{13194403774464, {{1, 1},{1, 3},{3, 1}}},
{16905091940352, {{1, 1},{1, 3},{3, 3}}},
{864708446031446016, {{1, 1},{1, 4},{4, 1}}},
{1150123659931680768, {{1, 1},{1, 4},{4, 4}}},
{768, {{1, 1},{2, 0},{2, 1}}},
{150995712, {{1, 1},{2, 0},{2, 2}}},
{864, {{1, 1},{2, 0},{3, 1}}},
{150994944, {{1, 1},{2, 1},{2, 2}}},
{163577856, {{1, 1},{2, 2},{3, 1}}},
{618642014208, {{1, 1},{3, 1},{3, 3}}},
{2533957857902592, {{1, 1},{4, 1},{4, 4}}},
{13194139533312, {{1, 2},{1, 3},{2, 2}}},
{6597069766656, {{1, 2},{1, 3},{2, 3}}},
{864697725524901888, {{1, 2},{1, 4},{2, 3}}},
{864708445763272704, {{1, 2},{1, 4},{3, 2}}},
{1107892105402908672, {{1, 2},{1, 4},{3, 4}}},
{50331648, {{1, 2},{2, 1},{2, 2}}},
{9895654981632, {{1, 2},{2, 1},{2, 3}}},
{56623104, {{1, 2},{2, 1},{3, 2}}},
{9895604649984, {{1, 2},{2, 2},{2, 3}}},
{10720238370816, {{1, 2},{2, 3},{3, 2}}},
{66060336, {{1, 2},{3, 0},{3, 2}}},
{40543323109195824, {{1, 2},{3, 0},{3, 4}}},
{40543323043135488, {{1, 2},{3, 2},{3, 4}}},
{864691128455135232, {{1, 3},{1, 4},{2, 3}}},
{432345564227567616, {{1, 3},{1, 4},{2, 4}}},
{3298534883328, {{1, 3},{2, 2},{2, 3}}},
{648521644876234752, {{1, 3},{2, 2},{2, 4}}},
{3710851743744, {{1, 3},{2, 2},{3, 3}}},
{648518346341351424, {{1, 3},{2, 3},{2, 4}}},
{702561541869797376, {{1, 3},{2, 4},{3, 3}}},
{4329330180096, {{1, 3},{3, 1},{3, 3}}},
{4393755672579, {{1, 3},{4, 0},{4, 3}}},
{216172782113783808, {{1, 4},{2, 3},{2, 4}}},
{243194379878006784, {{1, 4},{2, 3},{3, 4}}},
{283726982682771456, {{1, 4},{3, 2},{3, 4}}},
{287949171758137344, {{1, 4},{4, 1},{4, 4}}},
{192, {{2, 0},{2, 1},{3, 0}}},
{96, {{2, 0},{2, 1},{3, 1}}},
{12583008, {{2, 0},{2, 2},{3, 1}}},
{12583164, {{2, 0},{2, 2},{4, 0}}},
{16121952, {{2, 0},{2, 2},{4, 2}}},
{54044277876326496, {{2, 0},{2, 4},{4, 2}}},
{144, {{2, 0},{3, 0},{3, 1}}},
{156, {{2, 0},{3, 1},{4, 0}}},
{589983, {{2, 0},{4, 0},{4, 2}}},
{12582912, {{2, 1},{2, 2},{3, 1}}},
{6291456, {{2, 1},{2, 2},{3, 2}}},
{824640012288, {{2, 1},{2, 3},{3, 2}}},
{824650235904, {{2, 1},{2, 3},{4, 1}}},
{1056568246272, {{2, 1},{2, 3},{4, 3}}},
{48, {{2, 1},{3, 0},{3, 1}}},
{9437232, {{2, 1},{3, 0},{3, 2}}},
{54, {{2, 1},{3, 0},{4, 1}}},
{9437184, {{2, 1},{3, 1},{3, 2}}},
{10223616, {{2, 1},{3, 2},{4, 1}}},
{38665125888, {{2, 1},{4, 1},{4, 3}}},
{824633720832, {{2, 2},{2, 3},{3, 2}}},
{412316860416, {{2, 2},{2, 3},{3, 3}}},
{54043607845306368, {{2, 2},{2, 4},{3, 3}}},
{54044277860204544, {{2, 2},{2, 4},{4, 2}}},
{69243256587681792, {{2, 2},{2, 4},{4, 4}}},
{3145728, {{2, 2},{3, 1},{3, 2}}},
{618478436352, {{2, 2},{3, 1},{3, 3}}},
{3538944, {{2, 2},{3, 1},{4, 2}}},
{618475290624, {{2, 2},{3, 2},{3, 3}}},
{670014898176, {{2, 2},{3, 3},{4, 2}}},
{4128771, {{2, 2},{4, 0},{4, 2}}},
{2533957694324739, {{2, 2},{4, 0},{4, 4}}},
{2533957690195968, {{2, 2},{4, 2},{4, 4}}},
{54043195528445952, {{2, 3},{2, 4},{3, 3}}},
{27021597764222976, {{2, 3},{2, 4},{3, 4}}},
{206158430208, {{2, 3},{3, 2},{3, 3}}},
{40532602804764672, {{2, 3},{3, 2},{3, 4}}},
{231928233984, {{2, 3},{3, 2},{4, 3}}},
{40532396646334464, {{2, 3},{3, 3},{3, 4}}},
{43910096366862336, {{2, 3},{3, 4},{4, 3}}},
{270583136256, {{2, 3},{4, 1},{4, 3}}},
{13510798882111488, {{2, 4},{3, 3},{3, 4}}},
{15199648742375424, {{2, 4},{3, 3},{4, 4}}},
{17732936417673216, {{2, 4},{4, 2},{4, 4}}},
{12, {{3, 0},{3, 1},{4, 0}}},
{6, {{3, 0},{3, 1},{4, 1}}},
{786438, {{3, 0},{3, 2},{4, 1}}},
{9, {{3, 0},{4, 0},{4, 1}}},
{786432, {{3, 1},{3, 2},{4, 1}}},
{393216, {{3, 1},{3, 2},{4, 2}}},
{51540000768, {{3, 1},{3, 3},{4, 2}}},
{3, {{3, 1},{4, 0},{4, 1}}},
{589827, {{3, 1},{4, 0},{4, 2}}},
{589824, {{3, 1},{4, 1},{4, 2}}},
{51539607552, {{3, 2},{3, 3},{4, 2}}},
{25769803776, {{3, 2},{3, 3},{4, 3}}},
{3377725490331648, {{3, 2},{3, 4},{4, 3}}},
{196608, {{3, 2},{4, 1},{4, 2}}},
{38654902272, {{3, 2},{4, 1},{4, 3}}},
{38654705664, {{3, 2},{4, 2},{4, 3}}},
{3377699720527872, {{3, 3},{3, 4},{4, 3}}},
{1688849860263936, {{3, 3},{3, 4},{4, 4}}},
{12884901888, {{3, 3},{4, 2},{4, 3}}},
{2533287675297792, {{3, 3},{4, 2},{4, 4}}},
{2533274790395904, {{3, 3},{4, 3},{4, 4}}},
{844424930131968, {{3, 4},{4, 3},{4, 4}}},
};

void func2(TField field, size_t _i, const unordered_map<TField, vector<TField>>& bit2variants, vector<TField>& cur_triangles, vector<TField>& result, size_t& min_size) {

    if (_i == 0) {
        return;
    }

    if (cur_triangles.size() >= min_size) {
        return;
    }

    if (field == 0xFFFFFFFFFFFFFFFF and cur_triangles.size() < min_size) {
        result = cur_triangles;
        min_size = result.size();
        return;
    }

    if (field & _i) {
        func2(field, _i >> 1, bit2variants, cur_triangles, result, min_size);
        return;
    }

    for (size_t i = 0; i < bit2variants.at(_i).size(); i++) {
        if ((field & bit2variants.at(_i)[i]) == 0) {
            cur_triangles.push_back(bit2variants.at(_i)[i]);
            func2(field | bit2variants.at(_i)[i], _i >> 1, bit2variants, cur_triangles, result, min_size);
            cur_triangles.pop_back();
        }
    }

}

/*
4 4 2
2 1 3 2 3 1
3 4 4 3 4 4

*/

int main() {

    size_t N, M, Q;

    cin >> N >> M >> Q;

    TField field = prepare(0, N, M);

    for (size_t i = 0; i < Q; i++) {
        int Ax, Ay, Bx, By, Cx, Cy;
        cin >> Ax >> Ay >> Bx >> By >> Cx >> Cy;

        field |= triangle2field({ {Ax, Ay}, {Bx, By}, {Cx, Cy} });
    }

    size_t min_size = 500;
    vector<TField> v;
    vector<TField> best;
    vector<TField> triangles = { 18444210115851608064, 18401978558906892288, 17726273686446538752, 13835335136503201788, 13835335136503136256, 13835335136339582976, 13835335132212363264, 13835163608398430208, 13835058055282163712, 11240984669916758016, 10376346318019756032, 10376293541461622784, 6917529027641081856, 4611408937206349827, 4608874979512025088, 4607186748130197504, 4539631722924343296, 3891110078048108544, 3458764513820540928, 1150123659931680768, 1107892105402908672, 864708446031446016, 864708446021223936, 864708445763272704, 864697725524901888, 864691128455135232, 702737446550372352, 702561541869797376, 648693169747133184, 648693168690167808, 648521644876234752, 648518346341351424, 432345564227567616, 287949171758137344, 283726982682771456, 243194379878006784, 216172782113783808, 69243256587681792, 54044277876326496, 54044277860204544, 54043607845306368, 54043195528445952, 43910096366862336, 40543325726441472, 40543323109195824, 40543323043135488, 40532602804764672, 40532396646334464, 27021597764222976, 17732936417673216, 15199648742375424, 13510798882111488, 3377725490331648, 3377699720527872, 2533957857943551, 2533957857902592, 2533957694324739, 2533957690195968, 2533287675297792, 2533274790395904, 1688849860263936, 844424930131968, 280791909163008, 270481471045632, 211110460456896, 211110460391424, 211107843145728, 211106232532992, 171523813933056, 158330479706112, 158329674399744, 105553116266496, 70325851127808, 70300090761264, 69269282881536, 59373627899904, 52776558133248, 17549494322688, 16905091940352, 13194403778556, 13194403774464, 13194240196608, 13194139533312, 10722922463232, 10720238370816, 9898272227328, 9895654981632, 9895604649984, 6597069766656, 4393755672579, 4329330180096, 3710851743744, 3298534883328, 1056568246272, 824650235904, 824640012288, 824633720832, 670014898176, 618642055152, 618642014208, 618478436352, 618475290624, 412316860416, 270583136256, 231928233984, 206158430208, 51540000768, 51539607552, 38665128447, 38665125888, 38654902272, 38654705664, 25769803776, 12884901888, 4127219712, 3221289984, 3221250048, 3221225472, 2617245696, 2415931392, 2415919104, 1610612736, 1073087328, 1056965376, 905969664, 805306368, 257951232, 201330624, 201328128, 201326592, 163618812, 163577856, 151035648, 150995712, 150994944, 100663296, 66060336, 56623104, 50331648, 16121952, 12583164, 12583008, 12582912, 10223616, 9439728, 9437232, 9437184, 6291456, 4128771, 3538944, 3145728, 786438, 786432, 589983, 589827, 589824, 393216, 196608, 49152, 39936, 36864, 24576, 13824, 12288, 3072, 2496, 2304, 1536, 864, 768, 192, 156, 144, 96, 54, 48, 12, 9, 6, 3 };
    unordered_map<TField, vector<TField>> bit2variants;

    for (TField f : triangles) {
        for (TField b = 1ull << 63; b; b >>= 1) {
            if (f & b) {
                bit2variants[b].push_back(f);
            }
        }
    }

    func2(field, 1ull << 63, bit2variants, v, best, min_size);

    cout << best.size() << endl;
    for (TField triangle : best) {
        cout << DATA.at(triangle) << endl;
    }

    return 0;
}